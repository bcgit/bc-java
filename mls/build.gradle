
plugins {
// OSGI
    id "biz.aQute.bnd.builder" version "7.0.0"
//     Provide convenience executables for trying out the examples.
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
//     Generate IntelliJ IDEA's .idea & .iml project files
//    id 'idea'
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'

sourceSets {

    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }

    java9 {
        java {
            srcDirs = ['src/main/jdk1.9']
        }
    }
}

dependencies {
    implementation project(':util')
    implementation project(':pkix')
    implementation project(':prov')

    //Provided
    implementation(files("../test/libs/annotations-api-6.0.53.jar"))
//    implementation(files("../test/libs/protobuf-java-util-3.22.3.jar"))
    implementation(files("../test/libs/guava-32.0.1-android.jar"))
    implementation(files("../test/libs/grpc-stub-1.58.0.jar"))
    implementation(files("../test/libs/protobuf-java-3.22.3.jar"))
    implementation(files("../test/libs/grpc-api-1.58.0.jar"))
    implementation(files("../test/libs/grpc-protobuf-lite-1.58.0.jar"))
    implementation(files("../test/libs/failureaccess-1.0.1.jar"))
    implementation(files("../test/libs/grpc-protobuf-1.58.0.jar"))

    //Compile
    compileOnly(files("../test/libs/grpc-services-1.58.0.jar"))

    //Runtime
    runtimeOnly(files("../test/libs/grpc-netty-shaded-1.58.0.jar"))
    runtimeOnly(files("../test/libs/grpc-core-1.58.0.jar"))
    runtimeOnly(files("../test/libs/perfmark-api-0.26.0.jar"))

    //Download jars online
//    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
//    implementation "io.grpc:grpc-services:${grpcVersion}"
//    implementation "io.grpc:grpc-stub:${grpcVersion}"
//    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
//    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
//    implementation "com.google.protobuf:protobuf-java-util:${protocVersion}"
    java9Implementation files(sourceSets.main.output.classesDirs) {
        builtBy compileJava
    }
}

evaluationDependsOn(":prov")
evaluationDependsOn(":util")
evaluationDependsOn(":pkix")

def grpcVersion = '1.58.0' // CURRENT_GRPC_VERSION
def protocVersion = '3.22.3'


checkstyleMain {
    source = fileTree('src/main/java')
}

compileJava {
    options.release = 8

    options.errorprone.disableWarningsInGeneratedCode = true
    options.errorprone.errorproneArgs = ["-Xep:IgnoredPureGetter:OFF"]
    options.errorprone.errorproneArgs.add("-XepExcludedPaths:.*/build/generated/.*")
}

compileJava9Java {

    options.release = 9
    def prov_jar="${project(":prov").jar.outputs.files.getFiles().getAt(0)}"
    def util_jar="${project(":util").jar.outputs.files.getFiles().getAt(0)}"
    def pkix_jar="${project(":pkix").jar.outputs.files.getFiles().getAt(0)}"


    options.compilerArgs += [
            '--module-path', "${prov_jar}${File.pathSeparator}${util_jar}${File.pathSeparator}${pkix_jar}"
    ]

    options.sourcepath = files(['src/main/java', 'src/main/jdk1.9'])
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

jar.archiveBaseName = "bcmls-$vmrange"


startScripts.enabled = false

// Creates start scripts for a class name and adds it to the distribution.
def createStartScripts(String mainClassName) {
    String bareName = mainClassName.substring(mainClassName.lastIndexOf('.') + 1);
    String taskName = bareName.uncapitalize();
    def newTask = tasks.register(taskName, CreateStartScripts) {
        mainClass = mainClassName
        applicationName = taskName.replaceAll('([A-Z])') { '-' + it[0].uncapitalize() }
        outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
//        classpath = startScripts.classpath
    }
    application {
        applicationDistribution.into('bin') {
            from(newTask)
            fileMode = 0755
        }
    }
}

extractIncludeProto {
    dependsOn(":prov:jar",":util:jar")
}

extractIncludeTestProto {
    dependsOn(":prov:jar",":util:jar")
}

createStartScripts('org.bouncycastle.mls.client.impl.MLSClient')

jar {
    from sourceSets.main.output
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }

    String packages = 'org.bouncycastle.mls.*'
    String v = "${rootProject.extensions.ext.bundle_version}"
    manifest.attributes('Multi-Release': 'true')
    manifest.attributes('Bundle-Name': 'bcmls')
    manifest.attributes('Bundle-SymbolicName': 'bcmls')
    manifest.attributes('Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8')
    manifest.attributes('Export-Package': "${packages};version=${v}")
    manifest.attributes('Import-Package': "java.*;resolution:=optional,javax.*;resolution:=optional,!${packages},org.bouncycastle.*;version=\"[${v},${maxVersion})\"")
    manifest.attributes('Bundle-Version': "${v}")
    manifest.attributes('Permissions': 'all-permissions')
    manifest.attributes('Codebase': '*')
    manifest.attributes('Application-Library-Allowable-Codebase': '*')
    manifest.attributes('Caller-Allowable-Codebase': '*') 
    manifest.attributes('Trusted-Library': 'true')
}

task sourcesJar(type: Jar) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    into('META-INF/versions/9') {
        from sourceSets.java9.allSource
    }
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

test {
    jvmArgs = ['-Dtest.java.version.prefix=any']
}

compileJava9Java.dependsOn([":prov:jar", ":util:jar",":pkix:jar"])

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.bouncycastle'
            artifactId = "bcmls-$vmrange"
            from components.java


            artifact(javadocJar)
            artifact(sourcesJar)
        }


    }
}
