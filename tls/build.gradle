
plugins {
  id "biz.aQute.bnd.builder" version "7.0.0"
}

jar.archiveBaseName = "bctls-$vmrange"

sourceSets {
    main {
         java {
            srcDirs = ['src/main/java', 'src/main/jdk1.5']
         }
    }

    java9 {
        java {
            srcDirs = ['src/main/jdk1.9']
        }
    }

    test11 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            srcDir(files("src/test/jdk1.11"))
        }
    }

    test15 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            srcDir(files("src/test/jdk1.15"))
        }
    }

    test21 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            srcDir(files("src/test/jdk21"))
        }
    }

}

dependencies {

    implementation project(':prov')
    implementation project(':util')
    implementation project(':pkix')

    java9Implementation project(':prov')
    java9Implementation project(':util')
    java9Implementation project(':pkix')
    java9Implementation files(sourceSets.main.output.classesDirs) {
        builtBy compileJava
    }

    test11Implementation group: 'junit', name: 'junit', version: '4.13.2'
    test15Implementation group: 'junit', name: 'junit', version: '4.13.2'
    test21Implementation group: 'junit', name: 'junit', version: '4.13.2'


    test11Implementation project(':prov')
    test11Implementation project(':util')
    test11Implementation project(':pkix')

    test15Implementation project(':prov')
    test15Implementation project(':util')
    test15Implementation project(':pkix')

    test21Implementation project(':prov')
    test21Implementation project(':util')
    test21Implementation project(':pkix')

}


evaluationDependsOn(":prov")
evaluationDependsOn(":util")
evaluationDependsOn(":pkix")

compileJava {
    options.release = 8
}

compileJava9Java {

    options.release = 9

    def prov_jar="${project(":prov").jar.outputs.files.getFiles().getAt(0)}"
    def util_jar="${project(":util").jar.outputs.files.getFiles().getAt(0)}"
    def pkix_jar="${project(":pkix").jar.outputs.files.getFiles().getAt(0)}"


    options.compilerArgs += [
            '--module-path', "${prov_jar}${File.pathSeparator}${util_jar}${File.pathSeparator}${pkix_jar}"
    ]

    options.sourcepath = files(['src/main/java', 'src/main/jdk1.9'])
}

compileTest11Java {

    options.release = 11
    options.sourcepath = files(['src/test/java', 'src/test/jdk1.11'])
}

compileTest15Java {
    options.release = 15
    options.sourcepath = files(['src/test/java', 'src/test/jdk1.15'])
}

compileTest21Java {

    options.release = 21
    options.sourcepath = files(['src/test/java', 'src/test/jdk21'])
}



task sourcesJar(type: Jar) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    exclude("**/*.so")
    into('META-INF/versions/9') {
        from sourceSets.java9.allSource
    }
}

jar {
    from sourceSets.main.output
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    String v = "${rootProject.extensions.ext.bundle_version}"
    manifest.attributes('Multi-Release': 'true')
    manifest.attributes('Bundle-Name': 'bctls')
    manifest.attributes('Bundle-SymbolicName': 'bctls')
    manifest.attributes('Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8')
    manifest.attributes('Export-Package': "org.bouncycastle.{jsse|tls}.*;version=${v}")
    manifest.attributes('Import-Package': "java.*;resolution:=optional,javax.*;resolution:=optional,!org.bouncycastle.{jsse|tls}.*,org.bouncycastle.*;version=\"[${v},${maxVersion})\"")
    manifest.attributes('Bundle-Version': "${v}")
    manifest.attributes('Permissions': 'all-permissions')
    manifest.attributes('Codebase': '*')
    manifest.attributes('Application-Library-Allowable-Codebase': '*')
    manifest.attributes('Caller-Allowable-Codebase': '*') 
    manifest.attributes('Trusted-Library': 'true')
}


task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveBaseName = jar.archiveBaseName
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.bouncycastle'
            artifactId = "bctls-$vmrange"
            from components.java

            artifact(javadocJar)
            artifact(sourcesJar)
        }

    }
}




task test8(type: Test) {
    onlyIf {System.getenv("BC_JDK8") != null}
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = false

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }

    jvmArgs = ['-Dtest.java.version.prefix=1.8']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}

task test11(type: Test) {
    onlyIf {System.getenv("BC_JDK11") != null}
    dependsOn(jar)

    testClassesDirs = sourceSets.test11.output.classesDirs
    classpath = sourceSets.test11.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = false

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }

    jvmArgs = ['-Dtest.java.version.prefix=11']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}

task test15(type: Test) {

    // This is testing the 1.15 code base
    onlyIf {System.getenv("BC_JDK17") != null}
    dependsOn jar

    testClassesDirs = sourceSets.test15.output.classesDirs
    classpath = sourceSets.test15.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = false

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    jvmArgs = ['-Dtest.java.version.prefix=17']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}

task test21(type: Test) {

    // This is testing the 21 code base
    onlyIf {System.getenv("BC_JDK21") != null}
    dependsOn jar

    testClassesDirs = sourceSets.test21.output.classesDirs
    classpath = sourceSets.test21.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = false

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }

    jvmArgs = ['-Dtest.java.version.prefix=21']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}

if (System.getenv("BC_JDK8") != null) {
    System.out.println("${project.name}: Adding test8 as dependency for test task because BC_JDK8 is defined")
    test.dependsOn("test8")
}

if (System.getenv("BC_JDK11") != null) {
    System.out.println("${project.name}: Adding test11 as dependency for test task because BC_JDK11 is defined")
    test.dependsOn("test11")
}

if (System.getenv("BC_JDK17") != null) {
    System.out.println("${project.name}: Adding test15 as dependency for test task because BC_JDK17 is defined")
    test.dependsOn("test15")
}

if (System.getenv("BC_JDK21") != null) {
    System.out.println("${project.name}: Adding test21 as dependency for test task because BC_JDK21 is defined")
    test.dependsOn("test21")
}



compileJava9Java.dependsOn([":prov:jar", ":util:jar",":pkix:jar"])
